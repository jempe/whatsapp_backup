


{{define "styles"}}


        <style>
.phrases_labels {
	display: grid;
	grid-template-columns: 40px 40px repeat(1, 1fr) 90px;
	gap: 10px;
	width: 100%;
	align-items: center;
	background-color: var(--primary-color);
	border-radius: 8px 8px 0 0;
}            

.phrases_item {
	display: grid;
	grid-template-columns: 40px 40px repeat(1, 1fr) 90px;
	gap: 10px;
	width: 100%;
	align-items: center;
	background-color: var(--table-odd-row-color);
}            

.phrases_label {
	padding: 0 10px;
	color: var(--alt-text-color);
	font-family: var(--primary-font);
}

.phrases_action_column {
	display: flex;
	column-gap: 10px;
}

.phrases_checkbox_column {
	padding: 0 10px;
}

.phrases_component_text {
	padding: 0 10px;
	font-family: var(--primary-font);
}

.pagination_count_text {
	color: var(--alt-text-color);
	font-family: var(--primary-font);
	font-size: 0.9rem;
}

.filters_container {
	display: flex;
	padding: 10px 0;
}

.pagination_footer {
	padding: 10px 20px;
	display: flex;
	justify-content: space-between;
	align-items: center;
	background-color: var(--primary-color);
	margin-bottom: 20px;
	border-radius: 0 0 8px 8px;
}

.pagination_buttons {
	display: flex;
	column-gap: 5px;
}

.pagination_buttons_container {
	display: flex;
	column-gap: 10px;
}

.pagination_link {
	border: none;
	background: transparent;
	width: 30px;
	height: 30px;
	color: var(--alt-text-color);
	cursor: pointer;
}

/* actions CSS starts here */

.phrases_item:nth-child(even) {
	background-color: var(--table-even-row-color);
}

.pagination_link[data-active] {
	background-color: var(--secondary-color);
	border-radius: 50%;
	color: var(--alt-text-color);
	font-family: var(--primary-font);
	font-size: 0.8rem;
}

#templates_container {
	display: none;
}

button[disabled] {
	opacity: 0.5;
	pointer-events: none;
}

/* actions CSS ends here */
        </style>
{{end}}


{{define "body"}}
    <body class="body">
            {{template "sidebar" .}}

            <main class="main">
            	{{template "header" .}}

		<a class="big_round_floating_button" href="admin/phrase.html" title="New Phrase" aria-label="Create New Phrase" aria-role="button">
			<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="M440-440H200v-80h240v-240h80v240h240v80H520v240h-80v-240Z"/></svg>
		</a>

                <section class="filters_container">
			<span class="pagination_count_text">Showing <span id="phrases_per_page">45</span> Phrases</span>
        	</section>
		<section class="phrases_container">
			<section class="phrases">
				<section class="phrases_labels">
					<span class="phrases_checkbox_column">
						<input type="checkbox" />
					</span>
					<span class="phrases_id_column">
						<p class="phrases_label">ID</p>
					</span>
					<span class="phrases_message_id_column">
						<p class="phrases_label">Message</p>
					</span>
					<span class="phrases_action_column">
						<p class="phrases_label">Action</p>
					</span>
				</section>

				<section id="phrases_container">
				</section>
			</section>
		</section>
		<section class="pagination_footer">
			<span class="pagination_count_text">
				Showing <span id="phrases_per_page_footer">10</span> of
				<span id="total_phrases">100</span> Phrases
			</span>
			<section class="pagination_buttons_container">
				<button class="small_button" id="first_button">
					First
				</button>

				<section class="pagination_buttons" id="pagination_buttons">
					<button class="pagination_link">1</button>
				</section>


				<button class="small_button" id="last_button">
					Last
				</button>
			</section>
		</section>
        </main>
	<div id="templates_container">
		<button class="pagination_link">4</button>

		<section class="phrases_item">
			<span class="phrases_checkbox_column">
				<input type="checkbox" />
			</span>
			<span class="phrases_id_column">
				<span class="phrases_component_text" data-field="id">37</span>
			</span>
			<span class="phrases_message_id_column">
				<p class="phrases_component_text" data-field="message_id">MessageID</p>
			</span>
			<span class="phrases_action_column">
				<a class="square_button edit_button" href="admin/phrase.html" title="Edit Phrase" aria-label="Edit Phrase" aria-role="button">
					<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed" class="edit_button_icon"><path d="M200-200h57l391-391-57-57-391 391v57Zm-80 80v-170l528-527q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L290-120H120Zm640-584-56-56 56 56Zm-141 85-28-29 57 57-29-28Z"/></svg>
				</a>
				<a class="square_danger_button delete_button" href="#" title="Delete Phrase" aria-label="Delete Phrase" aria-role="button">
					<svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed" class="delete_button_icon"><path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520ZM360-280h80v-360h-80v360Zm160 0h80v-360h-80v360ZM280-720v520-520Z"/></svg>
				</a>
			</span>
		</section>
	</div>
		<script>
const phrasesPerPage = document.getElementById("phrases_per_page");
const phrasesPerPageFooter = document.getElementById(
	"phrases_per_page_footer",
);
const totalPhrases = document.getElementById("total_phrases");

var currentPage = 1;
var pageSize = 20;
var sortField = "id";

const pageQuery = new URLSearchParams(window.location.search).get("page");

if (pageQuery) {
	currentPage = parseInt(pageQuery);
}

const pageSizeQuery = new URLSearchParams(window.location.search).get("page_size");

if (pageSizeQuery) {
	pageSize = parseInt(pageSizeQuery);
}

const sortFieldQuery = new URLSearchParams(window.location.search).get("sort");

if (sortFieldQuery) {
	sortField = sortFieldQuery;
}

if (authToken) {
	getPhrases(currentPage);
} else {
	gotoLogin();
}

async function getPhrases(page = 1) {
	const phrasesURL = `v1/phrases?sort=${sortField}&page_size=${pageSize}&page=${page}`;

	const response = await fetch(phrasesURL, {
		method: "GET",
		headers: getHeaders(),
	});

	if (response.status === 200) {
		const jsonData = await response.json();

		generateList(jsonData.phrases);
		generatePagination(jsonData.metadata, jsonData.phrases.length);
	} else {
		gotoLogin();
	}

	window.history.pushState({}, "", `admin/phrases.html?sort=${sortField}&page_size=${pageSize}&page=${page}`);
}
async function generateList(phrases) {
	const phrasesContainer = document.getElementById(
		"phrases_container",
	);

	phrasesContainer.innerHTML = "";

	for (let i = 0; i < phrases.length; i++) {
		const phrase = phrases[i];

		const createdAt = new Date(phrase.created_at);

		const createdAtString = createdAt.toLocaleDateString("en-US", {
			year: "numeric",
			month: "2-digit",
			day: "2-digit",
		});

		const phraseItem = document.querySelector(
			"#templates_container .phrases_item",
		).cloneNode(true);

		phraseItem.querySelector("[data-field=id]").innerHTML = formatInteger(phrase.id);
		//phraseItem.querySelector("[data-field=created_at]").innerHTML = createdAtString;
		phraseItem.querySelector("[data-field=message_id]").innerHTML = phrase.message_id;

		phraseItem.querySelector("a.edit_button").href = "admin/phrase.html?id=" + phrase.id;

		phraseItem.querySelector("a.delete_button").addEventListener("click", async () => {
			if (confirm("Are you sure you want to delete this channel?")) {
				const response = await fetch("v1/phrases/" + phrase.id, {
					method: "DELETE",
					headers: getHeaders(),
				});

				if (response.status === 200) {
					getPhrases(currentPage);
				}
			}
		});

		phrasesContainer.appendChild(phraseItem);
	}
}
async function generatePagination(metadata, itemsLength) {
	itemsLength = formatInteger(itemsLength);

	let showingTotal = formatInteger(metadata.page_size);

	if (itemsLength < metadata.page_size) {
		showingTotal = itemsLength;
	}

	phrasesPerPage.innerHTML = showingTotal;
	phrasesPerPageFooter.innerHTML = showingTotal;
	totalPhrases.innerHTML = formatInteger(metadata.total_records);

	const paginationContainer = document.querySelector("#pagination_buttons");
	paginationContainer.innerHTML = "";

	const firstButton = document.getElementById("first_button");

	if (metadata.current_page <= metadata.first_page) {
		firstButton.disabled = true;
	} else {
		firstButton.removeAttribute("disabled");
	}

	firstButton.onclick = () => getPhrases(metadata.first_page);

	for (let i = metadata.current_page - 2; i < metadata.current_page + 3; i++) {
		if (i < metadata.first_page || i > metadata.last_page) {
			continue;
		}

		const pageButton = document.querySelector("#templates_container .pagination_link").cloneNode(true);

		if (i === metadata.current_page) {
			pageButton.dataset.active = "true";
		}

		pageButton.innerHTML = i;
		paginationContainer.appendChild(pageButton);
		pageButton.onclick = () => getPhrases(i);
	}

	const lastButton = document.getElementById("last_button");

	if (metadata.current_page >= metadata.last_page) {
		lastButton.disabled = true;
	} else {
		lastButton.removeAttribute("disabled");

	}
	lastButton.onclick = () => getPhrases(metadata.last_page);
}

		</script>
    </body>

{{end}}

